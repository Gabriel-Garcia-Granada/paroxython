[
  [
    "tests/data/simple/assignment.py",
    "a = b",
    {},
    {},
    [
      [
        "assignment",
        [[1,1]]
      ],
      [
        "assignment_lhs_identifier:a",
        [[1,1]]
      ],
      [
        "assignment_rhs_atom:b",
        [[1,1]]
      ],
      [
        "single_assignment:a",
        [[1,1]]
      ]
    ]
  ],
  [
    "tests/data/simple/collatz_print.py",
    "def print_collatz(n):\n    while n != 1:\n        print(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    print(n)",
    {},
    {},
    [
      [
        "added_block_label",
        [[1,8]]
      ],
      [
        "added_label_on_line_4",
        [[4,4]]
      ],
      [
        "assignment",
        [[5,5],[7,7]]
      ],
      [
        "assignment_lhs_identifier:n",
        [[5,5],[7,7]]
      ],
      [
        "assignment_rhs_atom:1",
        [[7,7]]
      ],
      [
        "assignment_rhs_atom:2",
        [[5,5]]
      ],
      [
        "assignment_rhs_atom:3",
        [[7,7]]
      ],
      [
        "assignment_rhs_atom:n",
        [[5,5],[7,7]]
      ],
      [
        "binary_operator:Add",
        [[7,7]]
      ],
      [
        "binary_operator:Mod",
        [[4,4]]
      ],
      [
        "binary_operator:Mult",
        [[7,7]]
      ],
      [
        "call_argument:n",
        [[3,3],[8,8]]
      ],
      [
        "comparison_operator:Eq",
        [[4,4]]
      ],
      [
        "comparison_operator:NotEq",
        [[2,2]]
      ],
      [
        "divisibility_test:2",
        [[4,4]]
      ],
      [
        "evolve_state",
        [[2,7]]
      ],
      [
        "falsey_literal:0",
        [[4,4]]
      ],
      [
        "function:print_collatz",
        [[1,8]]
      ],
      [
        "function_argument:n",
        [[1,1]]
      ],
      [
        "function_argument_flavor:arg",
        [[1,1]]
      ],
      [
        "function_call:print",
        [[3,3],[8,8]]
      ],
      [
        "function_returning_nothing:print_collatz",
        [[1,8]]
      ],
      [
        "if",
        [[4,7]]
      ],
      [
        "if_else_branch",
        [[7,7]]
      ],
      [
        "if_test_atom:0",
        [[4,4]]
      ],
      [
        "if_test_atom:2",
        [[4,4]]
      ],
      [
        "if_test_atom:n",
        [[4,4]]
      ],
      [
        "if_then_branch",
        [[5,5]]
      ],
      [
        "int_literal",
        [[2,2],[4,4],[4,4],[5,5],[7,7],[7,7]]
      ],
      [
        "literal:Num",
        [[2,2],[4,4],[4,4],[7,7],[7,7]]
      ],
      [
        "single_assignment:n",
        [[5,5],[7,7]]
      ],
      [
        "suggest_augmented_assignment",
        [[5,5]]
      ],
      [
        "suggest_conditional_expression",
        [[4,7]]
      ],
      [
        "suggest_constant_definition",
        [[2,2],[7,7]]
      ],
      [
        "unknown_label",
        [[6,6]]
      ],
      [
        "variable_update:n:1",
        [[7,7]]
      ],
      [
        "variable_update:n:2",
        [[5,5]]
      ],
      [
        "variable_update:n:3",
        [[7,7]]
      ],
      [
        "variable_update_by_assignment:n:1",
        [[7,7]]
      ],
      [
        "variable_update_by_assignment:n:2",
        [[5,5]]
      ],
      [
        "variable_update_by_assignment:n:3",
        [[7,7]]
      ],
      [
        "while",
        [[2,7]]
      ]
    ]
  ],
  [
    "tests/data/simple/fizzbuzz.py",
    "for i in range(1, 101):\n    if i % 15 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
    {},
    {},
    [
      [
        "binary_operator:Mod",
        [[2,2],[4,4],[6,6]]
      ],
      [
        "call_argument:",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "call_argument:1",
        [[1,1]]
      ],
      [
        "call_argument:101",
        [[1,1]]
      ],
      [
        "call_argument:i",
        [[9,9]]
      ],
      [
        "comparison_operator:Eq",
        [[2,2],[4,4],[6,6]]
      ],
      [
        "divisibility_test:15",
        [[2,2]]
      ],
      [
        "divisibility_test:3",
        [[4,4]]
      ],
      [
        "divisibility_test:5",
        [[6,6]]
      ],
      [
        "falsey_literal:0",
        [[2,2],[4,4],[6,6]]
      ],
      [
        "for:i",
        [[1,9]]
      ],
      [
        "for_range:1:101",
        [[1,9]]
      ],
      [
        "function_call:print",
        [[3,3],[5,5],[7,7],[9,9]]
      ],
      [
        "function_call:range",
        [[1,1]]
      ],
      [
        "if",
        [[2,9],[4,9],[6,9]]
      ],
      [
        "if_elif_branch",
        [[5,5],[7,7]]
      ],
      [
        "if_else_branch",
        [[9,9]]
      ],
      [
        "if_test_atom:0",
        [[2,2],[4,4],[6,6]]
      ],
      [
        "if_test_atom:15",
        [[2,2]]
      ],
      [
        "if_test_atom:3",
        [[4,4]]
      ],
      [
        "if_test_atom:5",
        [[6,6]]
      ],
      [
        "if_test_atom:i",
        [[2,2],[4,4],[6,6]]
      ],
      [
        "if_then_branch",
        [[3,3]]
      ],
      [
        "int_literal",
        [[1,1],[1,1],[2,2],[2,2],[4,4],[4,4],[6,6],[6,6]]
      ],
      [
        "literal:Num",
        [[1,1],[1,1],[2,2],[2,2],[4,4],[4,4],[6,6],[6,6]]
      ],
      [
        "literal:Str",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "range:1:101",
        [[1,1]]
      ],
      [
        "suggest_constant_definition",
        [[2,2],[4,4],[6,6]]
      ]
    ]
  ],
  [
    "tests/data/simple/is_even.py",
    "def is_even(n):\n    return n % 2 == 0",
    {},
    {},
    [
      [
        "binary_operator:Mod",
        [[2,2]]
      ],
      [
        "comparison_operator:Eq",
        [[2,2]]
      ],
      [
        "divisibility_test:2",
        [[2,2]]
      ],
      [
        "falsey_literal:0",
        [[2,2]]
      ],
      [
        "function:is_even",
        [[1,2]]
      ],
      [
        "function_argument:n",
        [[1,1]]
      ],
      [
        "function_argument_flavor:arg",
        [[1,1]]
      ],
      [
        "function_returning_something:is_even",
        [[1,2]]
      ],
      [
        "int_literal",
        [[2,2],[2,2]]
      ],
      [
        "literal:Num",
        [[2,2],[2,2]]
      ],
      [
        "return",
        [[2,2]]
      ]
    ]
  ]
]