[
  [
    "assignment.py",
    "a = b",
    {},
    {},
    [
      [
        "assignment",
        [[1,1]]
      ],
      [
        "assignment_lhs_identifier:a",
        [[1,1]]
      ],
      [
        "assignment_rhs_atom:b",
        [[1,1]]
      ],
      [
        "single_assignment:a",
        [[1,1]]
      ]
    ]
  ],
  [
    "collatz_print.py",
    "def print_collatz(n):\n    while n != 1:\n        print(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    print(n)",
    {
      "added_label_on_line_4": [[4,4]],
      "unknown_label": [[6,6]],
      "added_block_label": [[1,8]]
    },
    {
      "literal:Num": [[5,5]],
      "binary_operator:FloorDiv": []
    },
    [
      [
        "added_block_label",
        [[1,8]]
      ],
      [
        "added_label_on_line_4",
        [[4,4]]
      ],
      [
        "addition_operator",
        [[7,7]]
      ],
      [
        "assignment:Add",
        [[7,7]]
      ],
      [
        "assignment:FloorDiv",
        [[5,5]]
      ],
      [
        "assignment_lhs_identifier:n",
        [[5,5],[7,7]]
      ],
      [
        "assignment_rhs_atom:1",
        [[7,7]]
      ],
      [
        "assignment_rhs_atom:2",
        [[5,5]]
      ],
      [
        "assignment_rhs_atom:3",
        [[7,7]]
      ],
      [
        "assignment_rhs_atom:n",
        [[5,5],[7,7]]
      ],
      [
        "binary_operator:Add",
        [[7,7]]
      ],
      [
        "binary_operator:Mod",
        [[4,4]]
      ],
      [
        "binary_operator:Mult",
        [[7,7]]
      ],
      [
        "call_argument:n",
        [[3,3],[8,8]]
      ],
      [
        "comparison_operator:Eq",
        [[4,4]]
      ],
      [
        "comparison_operator:NotEq",
        [[2,2]]
      ],
      [
        "divisibility_test:2",
        [[4,4]]
      ],
      [
        "function:print_collatz",
        [[1,8]]
      ],
      [
        "function_argument:n",
        [[1,1]]
      ],
      [
        "function_argument_flavor:arg",
        [[1,1]]
      ],
      [
        "function_call:print",
        [[3,3],[8,8]]
      ],
      [
        "function_call_without_result:print",
        [[3,3],[8,8]]
      ],
      [
        "function_returning_nothing:print_collatz",
        [[1,8]]
      ],
      [
        "if",
        [[4,7]]
      ],
      [
        "if_else_branch",
        [[7,7]]
      ],
      [
        "if_test_atom:0",
        [[4,4]]
      ],
      [
        "if_test_atom:2",
        [[4,4]]
      ],
      [
        "if_test_atom:n",
        [[4,4]]
      ],
      [
        "if_then_branch",
        [[5,5]]
      ],
      [
        "literal:0",
        [[4,4]]
      ],
      [
        "literal:1",
        [[2,2],[7,7]]
      ],
      [
        "literal:2",
        [[4,4],[5,5]]
      ],
      [
        "literal:3",
        [[7,7]]
      ],
      [
        "loop:while",
        [[2,7]]
      ],
      [
        "loop_with_late_exit:while",
        [[2,7]]
      ],
      [
        "modulo_operator",
        [[4,4]]
      ],
      [
        "multiplication_operator",
        [[7,7]]
      ],
      [
        "single_assignment:n",
        [[5,5],[7,7]]
      ],
      [
        "suggest_augmented_assignment",
        [[5,5]]
      ],
      [
        "suggest_constant_definition",
        [[2,2],[7,7]]
      ],
      [
        "unknown_label",
        [[6,6]]
      ],
      [
        "update:n:1",
        [[7,7]]
      ],
      [
        "update:n:2",
        [[5,5]]
      ],
      [
        "update:n:3",
        [[7,7]]
      ],
      [
        "update_by_assignment:n:1",
        [[7,7]]
      ],
      [
        "update_by_assignment:n:2",
        [[5,5]]
      ],
      [
        "update_by_assignment:n:3",
        [[7,7]]
      ],
      [
        "update_by_assignment_with:Add",
        [[7,7]]
      ],
      [
        "update_by_assignment_with:FloorDiv",
        [[5,5]]
      ],
      [
        "update_with:Add",
        [[7,7]]
      ],
      [
        "update_with:FloorDiv",
        [[5,5]]
      ],
      [
        "verbose_conditional_assignment",
        [[4,7]]
      ],
      [
        "while",
        [[2,7]]
      ]
    ]
  ],
  [
    "fizzbuzz.py",
    "import collatz_print\nfor i in range(1, 101):\n    if i % 15 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)",
    {},
    {},
    [
      [
        "binary_operator:Mod",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "call_argument:",
        [[4,4],[6,6],[8,8]]
      ],
      [
        "call_argument:1",
        [[2,2]]
      ],
      [
        "call_argument:101",
        [[2,2]]
      ],
      [
        "call_argument:i",
        [[10,10]]
      ],
      [
        "comparison_operator:Eq",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "divisibility_test:15",
        [[3,3]]
      ],
      [
        "divisibility_test:3",
        [[5,5]]
      ],
      [
        "divisibility_test:5",
        [[7,7]]
      ],
      [
        "for:i",
        [[2,10]]
      ],
      [
        "for_range:1:101",
        [[2,10]]
      ],
      [
        "function_call:print",
        [[4,4],[6,6],[8,8],[10,10]]
      ],
      [
        "function_call:range",
        [[2,2]]
      ],
      [
        "function_call_without_result:print",
        [[4,4],[6,6],[8,8],[10,10]]
      ],
      [
        "if",
        [[3,10],[5,10],[7,10]]
      ],
      [
        "if_elif_branch",
        [[6,6],[8,8]]
      ],
      [
        "if_else_branch",
        [[10,10]]
      ],
      [
        "if_test_atom:0",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "if_test_atom:15",
        [[3,3]]
      ],
      [
        "if_test_atom:3",
        [[5,5]]
      ],
      [
        "if_test_atom:5",
        [[7,7]]
      ],
      [
        "if_test_atom:i",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "if_then_branch",
        [[4,4]]
      ],
      [
        "import_internally:collatz_print",
        [[1,1]]
      ],
      [
        "import_module_internally:collatz_print",
        [[1,1]]
      ],
      [
        "literal:0",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "literal:1",
        [[2,2]]
      ],
      [
        "literal:101",
        [[2,2]]
      ],
      [
        "literal:15",
        [[3,3]]
      ],
      [
        "literal:3",
        [[5,5]]
      ],
      [
        "literal:5",
        [[7,7]]
      ],
      [
        "literal:Str",
        [[4,4],[6,6],[8,8]]
      ],
      [
        "loop:for",
        [[2,10]]
      ],
      [
        "loop_with_late_exit:for",
        [[2,10]]
      ],
      [
        "modulo_operator",
        [[3,3],[5,5],[7,7]]
      ],
      [
        "range:1:101",
        [[2,2]]
      ],
      [
        "suggest_constant_definition",
        [[3,3],[5,5],[7,7]]
      ]
    ]
  ],
  [
    "is_even.py",
    "import fizzbuzz\ndef is_even(n):\n    return n % 2 == 0",
    {},
    {},
    [
      [
        "binary_operator:Mod",
        [[3,3]]
      ],
      [
        "comparison_operator:Eq",
        [[3,3]]
      ],
      [
        "divisibility_test:2",
        [[3,3]]
      ],
      [
        "function:is_even",
        [[2,3]]
      ],
      [
        "function_argument:n",
        [[2,2]]
      ],
      [
        "function_argument_flavor:arg",
        [[2,2]]
      ],
      [
        "function_returning_something:is_even",
        [[2,3]]
      ],
      [
        "import_internally:fizzbuzz",
        [[1,1]]
      ],
      [
        "import_module_internally:fizzbuzz",
        [[1,1]]
      ],
      [
        "literal:0",
        [[3,3]]
      ],
      [
        "literal:2",
        [[3,3]]
      ],
      [
        "modulo_operator",
        [[3,3]]
      ],
      [
        "return",
        [[3,3]]
      ]
    ]
  ]
]